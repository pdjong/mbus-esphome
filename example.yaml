substitutions:
  device_name: mbus-v13-second
  friendly_name: M-Bus V1.3 2e
  time_timezone: "Europe/Amsterdam"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source:
    #  type: git
    #  url: https://github.com/pdjong/mbus-esphome
    #  ref: tryout-external-component-in-github
      type: local
      path: components
    #refresh: 0s
    
# Enable logging
logger:
  # baud_rate: 115200
  level: INFO 
  logs:
    sensor: INFO
    MbusController: INFO

# Enable Home Assistant API
api:
#   encryption:
#     key: "PsKaCvrdD8AjEdWsv7b32V2KGBf7kicJAqhE+/zU1H8="

ota:
  password: "e5264b2500ef5b812b82d4342c5a60f6"

wifi:
# Next two lines for building locally with ESPHome
  ssid: "?"
  password: "?"
# Next two lines for building on Home Assistant OS, ESPHome
 #ssid: !secret wifi_ssid
 #password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Warmte-Meter-Mbus-v-1-3-second"
    password: "MHcfSqvZc6fe"

uart:
  baud_rate: 2400
  tx_pin: 19
  rx_pin: 18
  data_bits: 8
  parity: EVEN
  stop_bits: 1

switch:
  - platform: gpio
    pin: 32
    name: "MBus Power"
    id: enable_boost_controller
    restore_mode: RESTORE_DEFAULT_ON

button:
  - platform: restart
    name: "${friendly_name} Restart"
  - platform: factory_reset
    name: "${friendly_name} Factory Reset"    

interval:
  - interval: 8sec
    then:
      - if:
          condition: 
            switch.is_on: enable_boost_controller
          then:
            - lambda: |-
                  id(mbuscontroller).read_mbus();
            - light.turn_on: readout_light
            - delay: 250ms
            - light.turn_off: readout_light

light:
  - platform: binary
    id: readout_light
    output: readout_light_output

output:
  - id: readout_light_output
    platform: gpio
    pin: GPIO25


mbus_controller:
  id: mbuscontroller
  address: 0x01

# Time for uptime
time:
  - platform: homeassistant
    id: time_homeassistant
    timezone: "${time_timezone}"
    on_time_sync:
      - component.update: sensor_uptime_timestamp
  - platform: sntp
    id: time_sntp
    timezone: "${time_timezone}"

debug:
  update_interval: 5s

sensor:
  - platform: mbus_controller
    name: "${friendly_name} T1"
    index: 6
    accuracy_decimals: 2
    unit_of_measurement: "°C"
    device_class: "temperature"
    icon: "mdi:thermometer"
  - platform: mbus_controller
    name: "${friendly_name} T2"
    index: 7
    accuracy_decimals: 2
    unit_of_measurement: "°C"
    device_class: "temperature"
    icon: "mdi:thermometer"
  - platform: mbus_controller
    name: "${friendly_name} Flow"
    index: 11
    accuracy_decimals: 0
    unit_of_measurement: "l/h"
    icon: "mdi:water"
    filters:
      - multiply: 0.001
  #Wifi signal
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 300s
    id: sensor_wifi_signal
  #Uptime
  - platform: uptime
    id: sensor_uptime      
  - platform: template
    id: sensor_uptime_timestamp
    name: "${friendly_name} Uptime"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
    entity_category: diagnostic
text_sensor:
  # IP address #
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "${friendly_name} Connected SSID"

status_led:
  pin:
    number: GPIO26